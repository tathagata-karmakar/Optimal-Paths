#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Feb  9 14:44:46 2024

@author: t_karmakar
"""

import os,sys
import time
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import math
import scipy
from scipy.integrate import simps as intg
#from google.colab import files
#from google.colab import drive
from matplotlib import rc
from pylab import rcParams
from matplotlib import colors
from qutip import *
from OP_Functions import *
os.environ["PATH"] += os.pathsep + '/Library/TeX/texbin'
rc('font', **{'family': 'serif', 'serif': ['Computer Modern']})
rc('text',usetex=True)

import jax
import jax.numpy as jnp
from jax import grad, jit, vmap
from jax import random
from jax import lax
from jax import device_put
from jax import make_jaxpr
from jax.scipy.special import logsumexp
from jax._src.nn.functions import relu,gelu
from functools import partial
import collections
from typing import Iterable
from jaxopt import OptaxSolver
import optax

#import torch
#from torch import nn
#from torch.utils.data import DataLoader,Dataset
#from torchvision import datasets
#from torchvision.io import read_image
#from torchvision.transforms import ToTensor, Lambda
#import torchvision.models as models
##torch.backends.cuda.cufft_plan_cache[0].max_size = 32
#torch.autograd.set_detect_anomaly(True)

nlevels = 15

#rho_f = coherent(nlevels, 0.5)
a = destroy(nlevels)
t_i = 0
t_f = 3
ts = np.linspace(t_i, t_f, 500)
dt = ts[1]-ts[0]
tau = 15.0
q4f = np.sqrt(1+4*tau*tau)-2*tau
q3f = np.sqrt(4*tau*q4f)
q5f = q3f*(1+q4f/(2*tau))
rparam = np.sqrt(q4f**2+(q3f-q5f)**2/4.0)+(q3f+q5f)/2.0
snh2r = np.sqrt(q4f**2+(q3f-q5f)**2/4.0)
csh2r = (q3f+q5f)/2.0
r_sq = np.log(rparam)/2
xiR = r_sq*(q5f-q3f)/(2*snh2r)
xiI = r_sq*(-q4f)/(snh2r)
in_alr = 0.0
in_ali = 0.0
fin_alr = 1.7
fin_ali = 0.8

rho_i = squeeze(nlevels, xiR+1j*xiI)*coherent(nlevels, in_alr+1j*in_ali)

#rho_f = basis(nlevels,4)
rho_f = squeeze(nlevels,  xiR+1j*xiI)*coherent(nlevels, fin_alr+1j*fin_ali)
rho_f_int = squeeze(nlevels,  xiR*np.cos(2*t_f)-xiI*np.sin(2*t_f)+1j*(xiI*np.cos(2*t_f)+xiR*np.sin(2*t_f)))*coherent(nlevels, fin_alr*np.cos(t_f)-fin_ali*np.sin(t_f)+1j*(fin_ali*np.cos(t_f)+fin_alr*np.sin(t_f)))


nsteps = 2000
X = (a+a.dag())/np.sqrt(2)
P = (a-a.dag())/(np.sqrt(2)*1j)
H = (X*X+P*P)/2.0
#Ljump = X
#Mjump = P
rho_i = rho_i*rho_i.dag()
#rho_i = thermal_dm(nlevels, 4)
rho_f = rho_f*rho_f.dag()
rho_f_int = rho_f_int*rho_f_int.dag()
sigma_i = rand_herm(nlevels)
sigma_i = sigma_i-expect(sigma_i, rho_i)
xvec = np.linspace(-5,5,200)
pvec = np.linspace(-5,5,200)
W_i = wigner(rho_i,xvec,pvec)

lrate = 1e-2
q3, q4, q5, alr, ali, A, B, q1t, q2t, rop_prxq = OP_PRXQ_Params(X, P, rho_i, rho_f, ts, tau)
#alr = np.random.rand()
#ali = np.random.rand()
#A = np.random.rand()
#B = np.random.rand()
#Initials = jnp.array([alr, ali, A, B])
#Initials = jnp.array(np.random.rand(4))
Initials = jnp.array([-2.5919571e+01, -1.8081909e+01, -5.6777561e+01, -3.2587278e+00])#, 3.6714874e-02,  9.6344221e-01, -4.1475769e-02,  6.6697055e-01, -3.5477483e+00], dtype=float32)
theta_t = np.zeros(len(ts))
theta_t = np.array([ 0.        , -0.00513862, -0.01027609, -0.01541241, -0.02054757,
       -0.02568159, -0.03081445, -0.03594616, -0.04107672, -0.04620612,
       -0.05133438, -0.05646147, -0.06158742, -0.06671221, -0.07183585,
       -0.07695834, -0.08207967, -0.08719984, -0.09231887, -0.09743674,
       -0.10255345, -0.10766901, -0.11278341, -0.11789666, -0.12300876,
       -0.1281197 , -0.13322949, -0.13833812, -0.1434456 , -0.14855192,
       -0.15365709, -0.1587611 , -0.16386396, -0.16896566, -0.17406621,
       -0.17916561, -0.18426385, -0.18936094, -0.19445688, -0.19955166,
       -0.20464529, -0.20973777, -0.21482909, -0.21991926, -0.22500828,
       -0.23009614, -0.23518286, -0.24026842, -0.24535284, -0.2504361 ,
       -0.25551821, -0.26059917, -0.26567899, -0.27075765, -0.27583517,
       -0.28091153, -0.28598675, -0.29106083, -0.29613375, -0.30120553,
       -0.30627617, -0.31134565, -0.316414  , -0.3214812 , -0.32654726,
       -0.33161217, -0.33667594, -0.34173858, -0.34680007, -0.35186042,
       -0.35691963, -0.3619777 , -0.36703464, -0.37209043, -0.3771451 ,
       -0.38219862, -0.38725101, -0.39230227, -0.3973524 , -0.40240139,
       -0.40744925, -0.41249599, -0.41754159, -0.42258606, -0.42762941,
       -0.43267163, -0.43771273, -0.4427527 , -0.44779155, -0.45282927,
       -0.45786588, -0.46290137, -0.46793573, -0.47296898, -0.47800111,
       -0.48303213, -0.48806204, -0.49309083, -0.49811851, -0.50314508,
       -0.50817054, -0.51319489, -0.51821814, -0.52324028, -0.52826132,
       -0.53328125, -0.53830009, -0.54331782, -0.54833446, -0.55335   ,
       -0.55836445, -0.56337781, -0.56839007, -0.57340124, -0.57841133,
       -0.58342032, -0.58842823, -0.59343506, -0.59844081, -0.60344548,
       -0.60844906, -0.61345157, -0.61845301, -0.62345337, -0.62845267,
       -0.63345089, -0.63844804, -0.64344413, -0.64843916, -0.65343312,
       -0.65842602, -0.66341787, -0.66840866, -0.67339839, -0.67838707,
       -0.68337471, -0.68836129, -0.69334683, -0.69833133, -0.70331478,
       -0.7082972 , -0.71327858, -0.71825892, -0.72323823, -0.72821651,
       -0.73319376, -0.73816999, -0.74314519, -0.74811938, -0.75309254,
       -0.75806469, -0.76303582, -0.76800595, -0.77297506, -0.77794317,
       -0.78291027, -0.78787637, -0.79284148, -0.79780559, -0.8027687 ,
       -0.80773082, -0.81269196, -0.81765211, -0.82261128, -0.82756946,
       -0.83252667, -0.83748291, -0.84243817, -0.84739247, -0.8523458 ,
       -0.85729816, -0.86224957, -0.86720002, -0.87214951, -0.87709806,
       -0.88204565, -0.8869923 , -0.89193801, -0.89688278, -0.90182661,
       -0.90676951, -0.91171148, -0.91665252, -0.92159264, -0.92653184,
       -0.93147013, -0.9364075 , -0.94134395, -0.94627951, -0.95121415,
       -0.9561479 , -0.96108075, -0.96601271, -0.97094378, -0.97587396,
       -0.98080325, -0.98573167, -0.99065921, -0.99558588, -1.00051168,
       -1.00543662, -1.01036069, -1.0152839 , -1.02020626, -1.02512777,
       -1.03004843, -1.03496825, -1.03988723, -1.04480538, -1.04972269,
       -1.05463917, -1.05955483, -1.06446967, -1.06938369, -1.0742969 ,
       -1.0792093 , -1.0841209 , -1.0890317 , -1.0939417 , -1.0988509 ,
       -1.10375932, -1.10866696, -1.11357381, -1.11847989, -1.1233852 ,
       -1.12828973, -1.13319351, -1.13809652, -1.14299879, -1.14790029,
       -1.15280106, -1.15770108, -1.16260036, -1.16749891, -1.17239673,
       -1.17729383, -1.1821902 , -1.18708586, -1.19198081, -1.19687506,
       -1.20176859, -1.20666144, -1.21155358, -1.21644504, -1.22133582,
       -1.22622592, -1.23111534, -1.23600409, -1.24089218, -1.2457796 ,
       -1.25066637, -1.25555249, -1.26043796, -1.26532279, -1.27020698,
       -1.27509055, -1.27997348, -1.28485579, -1.28973749, -1.29461857,
       -1.29949904, -1.30437891, -1.30925819, -1.31413687, -1.31901496,
       -1.32389247, -1.3287694 , -1.33364576, -1.33852156, -1.34339679,
       -1.34827146, -1.35314558, -1.35801916, -1.36289219, -1.36776469,
       -1.37263665, -1.37750809, -1.38237901, -1.38724941, -1.3921193 ,
       -1.39698869, -1.40185757, -1.40672597, -1.41159387, -1.41646129,
       -1.42132823, -1.4261947 , -1.4310607 , -1.43592624, -1.44079132,
       -1.44565595, -1.45052014, -1.45538388, -1.46024719, -1.46511007,
       -1.46997253, -1.47483457, -1.47969619, -1.48455741, -1.48941823,
       -1.49427865, -1.49913869, -1.50399833, -1.5088576 , -1.5137165 ,
       -1.51857503, -1.52343319, -1.528291  , -1.53314846, -1.53800558,
       -1.54286235, -1.54771879, -1.55257491, -1.5574307 , -1.56228618,
       -1.56714135, -1.57199621, -1.57685077, -1.58170505, -1.58655903,
       -1.59141273, -1.59626616, -1.60111932, -1.60597222, -1.61082486,
       -1.61567725, -1.62052939, -1.62538129, -1.63023296, -1.6350844 ,
       -1.63993561, -1.64478662, -1.64963741, -1.654488  , -1.65933839,
       -1.66418858, -1.66903859, -1.67388843, -1.67873808, -1.68358757,
       -1.6884369 , -1.69328607, -1.69813509, -1.70298397, -1.70783271,
       -1.71268131, -1.7175298 , -1.72237816, -1.7272264 , -1.73207454,
       -1.73692258, -1.74177053, -1.74661838, -1.75146615, -1.75631384,
       -1.76116146, -1.76600902, -1.77085652, -1.77570396, -1.78055136,
       -1.78539872, -1.79024604, -1.79509333, -1.7999406 , -1.80478786,
       -1.8096351 , -1.81448235, -1.81932959, -1.82417684, -1.82902411,
       -1.83387139, -1.83871871, -1.84356605, -1.84841344, -1.85326086,
       -1.85810834, -1.86295588, -1.86780348, -1.87265115, -1.8774989 ,
       -1.88234672, -1.88719464, -1.89204265, -1.89689076, -1.90173897,
       -1.9065873 , -1.91143574, -1.91628431, -1.92113301, -1.92598185,
       -1.93083082, -1.93567995, -1.94052923, -1.94537867, -1.95022828,
       -1.95507806, -1.95992802, -1.96477817, -1.96962851, -1.97447904,
       -1.97932977, -1.98418072, -1.98903188, -1.99388326, -1.99873487,
       -2.00358671, -2.00843879, -2.01329112, -2.01814369, -2.02299653,
       -2.02784962, -2.03270299, -2.03755663, -2.04241055, -2.04726476,
       -2.05211926, -2.05697405, -2.06182916, -2.06668457, -2.0715403 ,
       -2.07639635, -2.08125273, -2.08610944, -2.09096649, -2.09582389,
       -2.10068163, -2.10553974, -2.11039821, -2.11525704, -2.12011625,
       -2.12497584, -2.12983582, -2.13469618, -2.13955695, -2.14441812,
       -2.14927969, -2.15414168, -2.15900409, -2.16386693, -2.16873019,
       -2.1735939 , -2.17845804, -2.18332263, -2.18818768, -2.19305319,
       -2.19791916, -2.2027856 , -2.20765252, -2.21251992, -2.2173878 ,
       -2.22225618, -2.22712505, -2.23199443, -2.23686432, -2.24173472,
       -2.24660564, -2.25147708, -2.25634906, -2.26122157, -2.26609462,
       -2.27096821, -2.27584236, -2.28071707, -2.28559234, -2.29046817,
       -2.29534458, -2.30022156, -2.30509913, -2.30997728, -2.31485603,
       -2.31973538, -2.32461533, -2.32949589, -2.33437706, -2.33925885,
       -2.34414127, -2.34902431, -2.35390799, -2.3587923 , -2.36367726,
       -2.36856287, -2.37344913, -2.37833605, -2.38322364, -2.38811189,
       -2.39300081, -2.39789042, -2.4027807 , -2.40767168, -2.41256334,
       -2.4174557 , -2.42234877, -2.42724254, -2.43213702, -2.43703222,
       -2.44192814, -2.44682478, -2.45172216, -2.45662026, -2.46151911])
theta_t = np.zeros(len(ts))
jnptheta_t = jnp.array(theta_t)
tb = 0
jnpId = jnp.identity(nlevels)
jnpX = jnp.array(X.full())
jnpP = jnp.array(P.full())
jnpH = jnp.array(H.full())
jnpX2 = jnp.matmul(jnpX, jnpX)
jnpP2 = jnp.matmul(jnpP, jnpP)
jnpXP = jnp.matmul(jnpX, jnpP)
jnpPX = jnp.matmul(jnpP, jnpX)
jnp_rho_i = jnp.array(rho_i.full())
jnp_rho_f = jnp.array(rho_f_int.full())

I_tR = jnp.array([0.0])
I_tI = jnp.array([0.0])
#Initials1, jnpX, jnpP, jnpH, jnpX2, jnpP2, jnpXP, jnpPX, jnp_rho, I_tR, I_tI, theta_t, ts, tau, dt, l1 = rho_update(0,(Initials, jnpX, jnpP, jnpH, jnpX2, jnpP2, jnpXP, jnpPX, jnp_rho_i, I_tR, I_tI,  theta_t, ts, tau, dt, 0))
#jnp_rho_simul = OPsoln_JAX1(Initials, jnpX, jnpP, jnpH, jnp_rho_i, jnp.array(theta_t), jnp.array(ts), dt, tau, jnpId)

for n in range(nsteps):
  stime = time.time()
  print (CostF_strat(Initials, jnpX, jnpP, jnpH, jnp_rho_i, jnp_rho_f, theta_t, ts, dt, tau, jnpId))
  Initials = update_strat(Initials, jnpX, jnpP, jnpH, jnp_rho_i, jnp_rho_f, theta_t, ts, dt, tau, jnpId, lrate)
  print (n, time.time()-stime)

Initvals = np.array(Initials)

PlotOP(Initvals, X, P, H, rho_i, rho_f, ts, theta_t, tau, 'tmpfigs')

rho_f_simul, X_simul, P_simul, varX_simul, covXP_simul, varP_simul, rop, nbar = OPsoln_strat_SHO(X, P, H, rho_i, Initvals[0], Initvals[1], Initvals[2], Initvals[3], ts, theta_t,  tau, 1)
print ('Fidelity ', fidelity(rho_f_simul, rho_f_int))

